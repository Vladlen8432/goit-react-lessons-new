{"version":3,"file":"static/js/136.e9c25cc4.chunk.js","mappings":"0MAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,QAAS,EACnDC,EAA0B,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,SAAU,EAC7DC,EAAsB,SAAAL,GAAK,OAAIA,EAAMC,UAAUK,KAAM,E,6BC6GlE,EAjGqB,WACnB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXN,GAAWO,EAAAA,EAAAA,IAAYV,GACvBK,GAAYK,EAAAA,EAAAA,IAAYN,GACxBG,GAAQG,EAAAA,EAAAA,IAAYJ,GAEpBK,GAAUC,EAAAA,EAAAA,QAAO,OAEvBC,EAAAA,EAAAA,YAAU,WACRL,GAASM,EAAAA,EAAAA,MACX,GAAG,CAACN,IAEJ,IAoBMO,EAAeC,MAAMC,QAAQd,IAAaA,EAASe,OAAS,EAElE,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAME,IAAKV,EAASW,SAxBH,SAAAC,GACnBA,EAAMC,iBAEN,IAGMC,EAAW,CACfC,KAJWH,EAAMI,cAAcC,SAASC,YAAYC,MAKpDC,OAJaR,EAAMI,cAAcC,SAASI,cAAcF,OAM1DtB,GAASyB,EAAAA,EAAAA,IAAgBR,IACtBS,SACAC,MAAK,kBAAMxB,EAAQyB,QAAQC,OAAO,GACvC,EAW+CjB,SAAA,EACzCkB,EAAAA,EAAAA,KAAA,MAAAlB,SAAI,qBACJD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEkB,EAAAA,EAAAA,KAAA,KAAAlB,SAAG,WACHkB,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,eACZC,UAAQ,EACRf,KAAK,oBAITP,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEkB,EAAAA,EAAAA,KAAA,KAAAlB,SAAG,aACHkB,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,YAAY,YACZC,UAAQ,EACRf,KAAK,gBACLgB,UAAW,QAGfJ,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQnB,SAAC,WAEb,OAAVb,IAAkB+B,EAAAA,EAAAA,KAAA,KAAGK,UAAU,aAAYvB,SAAEb,IAC7CF,IAAaiC,EAAAA,EAAAA,KAACM,EAAAA,EAAM,KACrBN,EAAAA,EAAAA,KAAA,MAAAlB,SACGL,GACCZ,EAAS0C,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIrB,EAAIoB,EAAJpB,KAAMK,EAAMe,EAANf,OAAM,OAC9BZ,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEkB,EAAAA,EAAAA,KAAA,QAAAlB,SAAOM,KACPY,EAAAA,EAAAA,KAAA,UACEU,SAAU3C,EACV4C,QAAS,kBA5CDC,EA4CuBH,OA3C7CvC,GAAS2C,EAAAA,EAAAA,IAAmBD,IADN,IAAAA,CA4C0B,EAAC9B,SACpC,qBAIHkB,EAAAA,EAAAA,KAAA,KAAAlB,SAAIW,MAVGgB,EAWJ,QAiBjB,C","sources":["redux/contacts/contacts.selectors.js","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.phonebook.contacts;\nexport const selectContactsIsLoading = state => state.phonebook.isLoading;\nexport const selectContactsError = state => state.phonebook.error;\n","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectContactsError,\n  selectContactsIsLoading,\n} from '../redux/contacts/contacts.selectors';\nimport {\n  addContactThunk,\n  deleteContactThunk,\n  fetchContactsThunk,\n} from '../redux/contacts/contacts.reducer';\nimport Loader from 'components/Loader/Loader';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  const formRef = useRef(null);\n\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  const onAddContact = event => {\n    event.preventDefault();\n\n    const name = event.currentTarget.elements.contactName.value;\n    const number = event.currentTarget.elements.contactNumber.value;\n\n    const formData = {\n      name,\n      number,\n    };\n    dispatch(addContactThunk(formData))\n      .unwrap()\n      .then(() => formRef.current.reset());\n  };\n\n  const onDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n    // console.log('contactId:', contactId);\n  };\n\n  const showContacts = Array.isArray(contacts) && contacts.length > 0;\n\n  return (\n    <div>\n      <form ref={formRef} onSubmit={onAddContact}>\n        <h2>Add New Contact</h2>\n        <label>\n          <p>Name:</p>\n          <input\n            type=\"text\"\n            placeholder=\"Jacob Mercer\"\n            required\n            name=\"contactName\"\n          />\n        </label>\n\n        <label>\n          <p>Number:</p>\n          <input\n            type=\"text\"\n            placeholder=\"761-23-96\"\n            required\n            name=\"contactNumber\"\n            minLength={3}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Add</button>\n      </form>\n      {error !== null && <p className=\"error-bage\">{error}</p>}\n      {isLoading && <Loader />}\n      <ul>\n        {showContacts &&\n          contacts.map(({ id, name, number }) => (\n            <li key={id}>\n              <h3>\n                <span>{name}</span>\n                <button\n                  disabled={isLoading}\n                  onClick={() => onDeleteContact(id)}\n                >\n                  ðŸ¤ž\n                </button>\n              </h3>\n              <p>{number}</p>\n            </li>\n          ))}\n        {/* {showContacts &&\n          contacts.map((id, name, number) => {\n            return (\n              <li key={id}>\n                <h3>\n                  <span>{name}</span>\n                  <button>ðŸ¤ž</button>\n                </h3>\n                <p>{number}</p>\n              </li>\n            );\n          })} */}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","phonebook","contacts","selectContactsIsLoading","isLoading","selectContactsError","error","dispatch","useDispatch","useSelector","formRef","useRef","useEffect","fetchContactsThunk","showContacts","Array","isArray","length","_jsxs","children","ref","onSubmit","event","preventDefault","formData","name","currentTarget","elements","contactName","value","number","contactNumber","addContactThunk","unwrap","then","current","reset","_jsx","type","placeholder","required","minLength","className","Loader","map","_ref","id","disabled","onClick","contactId","deleteContactThunk"],"sourceRoot":""}